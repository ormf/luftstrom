;;; 
;;; cc-presets.lisp
;;;
;;; **********************************************************************
;;; Copyright (c) 2019 Orm Finnendahl <orm.finnendahl@selma.hfmdk-frankfurt.de>
;;;
;;; Revision history: See git repository.
;;;
;;; This program is free software; you can redistribute it and/or
;;; modify it under the terms of the Gnu Public License, version 2 or
;;; later. See https://www.gnu.org/licenses/gpl-2.0.html for the text
;;; of this agreement.
;;; 
;;; This program is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
;;; GNU General Public License for more details.
;;;
;;; **********************************************************************

(in-package :luftstrom-display)

(defparameter *cc-presets* (make-hash-table))

(defmacro with-cc-def-bound ((fn reset) cc-def &rest body)
  `(if (functionp ,cc-def)
       (let ((,fn ,cc-def)
             (,reset nil))
         ,@body)
       (let ((,fn (first ,cc-def))
             (,reset (second ,cc-def)))
         ,@body)))

#|
(:nk2-std ,(lambda (player)
                       `((,player 0)
                         (list
                          ,(with-exp-midi-fn (0.1 20)
                             (let ((speedf (float (funcall ipfn d2))))
                               (set-value :maxspeed (* speedf 1.05))
                               (set-value :maxforce (* speedf 0.09))))
                          t)
                         (,player 1)
                         (list
                          ,(with-lin-midi-fn (1 8)
                             (set-value :sepmult (float (funcall ipfn d2))))
                          t)
                         (,player 2)
                         (list
                          ,(with-lin-midi-fn (1 8)
                             (set-value :cohmult (float (funcall ipfn d2))))
                          t)
                         (,player 3)
                         (list
                          ,(with-lin-midi-fn (1 8)
                             (set-value :alignmult (float (funcall ipfn d2))))
                          t)
                         (,player 4)
                         (list
                          ,(with-exp-midi-fn (1 500)
                             (set-value :boids-per-click(round (funcall ipfn d2))))
                          t)
                         (,player 5)
                         (list
                          ,(with-lin-midi-fn (0 500)
                             (set-value :lifemult (float (funcall ipfn d2))))
                          t)
                         (,player 20)
                         (list
                          ,(with-exp-midi-fn (5 250)
                             (setf *length* (round (funcall ipfn d2))))
                          t)
                         (,player 6)
                         (list
                          ,(with-lin-midi-fn (0 50)
                             (setf *clockinterv* (round (funcall ipfn d2))))
                          t))))

(:nk2-std
           ,(lambda (player)
              `((,player 0)
                ,(with-exp-midi-fn (0.1 20)
                   (let ((speedf (float (funcall ipfn d2))))
                     (set-value :maxspeed (* speedf 1.05))
                     (set-value :maxforce (* speedf 0.09))))
                (,player 1)
                ,(with-lin-midi-fn (1 8)
                   (set-value :sepmult (float (funcall ipfn d2))))
                (,player 2)
                ,(with-lin-midi-fn (1 8)
                   (set-value :cohmult (float (funcall ipfn d2))))
                (,player 3)
                ,(with-lin-midi-fn (1 8)
                   (set-value :alignmult (float (funcall ipfn d2))))
                (,player 4)
                ,(with-lin-midi-fn (0 500)
                   (set-value :lifemult (float (funcall ipfn d2))))
                (,player 20)
                ,(with-exp-midi-fn (5 250)
                   (setf *length* (round (funcall ipfn d2))))
                (,player 6)
                ,(with-lin-midi-fn (0 50)
                   (setf *clockinterv* (round (funcall ipfn d2)))))))

(set-value :maxspeed 0.1)

|#

(defun init-cc-presets ()
  (loop for (key val) in
        `((:nk2-std
           ,(lambda (player)
              `((,player 0)
                ,(with-exp-midi-fn (0.1 20)
                   (let ((speedf (float (funcall ipfn d2))))
                     (set-value :maxspeed (* speedf 1.05))
                     (set-value :maxforce (* speedf 0.09))))
                (,player 1)
                ,(with-lin-midi-fn (1 8)
                   (set-value :sepmult (float (funcall ipfn d2))))
                (,player 2)
                ,(with-lin-midi-fn (1 8)
                   (set-value :cohmult (float (funcall ipfn d2))))
                (,player 3)
                ,(with-lin-midi-fn (1 8)
                   (set-value :alignmult (float (funcall ipfn d2))))
                (,player 4)
                ,(with-exp-midi-fn (1 500)
                   (set-value :boids-per-click(round (funcall ipfn d2))))
                (,player 5)
                ,(with-lin-midi-fn (0 500)
                   (set-value :lifemult (float (funcall ipfn d2))))
                (,player 20)
                ,(with-exp-midi-fn (5 250)
                   (setf *length* (round (funcall ipfn d2))))
                (,player 6)
                ,(with-lin-midi-fn (0 50)
                   (setf *clockinterv* (round (funcall ipfn d2)))))))
          (:nk2-std-noreset ,(lambda (player)
                               `((,player 0)
                                 (list ,(with-exp-midi-fn (0.1 20)
                                            (let ((speedf (float (funcall ipfn d2))))
                                              (set-value :maxspeed (* speedf 1.05))
                                              (set-value :maxforce (* speedf 0.09))))
                                         t)
                                 (,player 1)
                                 (list
                                  ,(with-lin-midi-fn (1 8)
                                     (set-value :sepmult (float (funcall ipfn d2))))
                                  t)
                                 (,player 2)
                                 (list ,(with-lin-midi-fn (1 8)
                                            (set-value :cohmult (float (funcall ipfn d2))))
                                         t)
                                 (,player 3)
                                 (list ,(with-lin-midi-fn (1 8)
                                            (set-value :alignmult (float (funcall ipfn d2))))
                                         t)
                                 (,player 4)
                                 (list ,(with-lin-midi-fn (0 500)
                                            (set-value :lifemult (float (funcall ipfn d2))))
                                         t))))
          (:nk2-std2 ,(lambda (player)
                        `((,player 0)
                          ,(with-exp-midi-fn (0.1 20)
                             (let ((speedf (float (funcall ipfn d2))))
                               (set-value :maxspeed (* speedf 1.05))
                               (set-value :maxforce (* speedf 0.09))))
                          (,player 1)
                          ,(with-lin-midi-fn (1 8)
                             (set-value :sepmult (float (funcall ipfn d2))))
                          (,player 2)
                          ,(with-lin-midi-fn (1 8)
                             (set-value :cohmult (float (funcall ipfn d2))))
                          (,player 3)
                          ,(with-lin-midi-fn (1 8)
                             (set-value :alignmult (float (funcall ipfn d2))))
                          (,player 4)
                          ,(with-lin-midi-fn (0 500)
                             (set-value :lifemult (float (funcall ipfn d2))))
                         (,player 4)
                         ,(with-exp-midi-fn (1 500)
                            (set-value :boids-per-click(round (funcall ipfn d2))))
                         (,player 5)
                         ,(with-lin-midi-fn (0 500)
                            (set-value :lifemult (float (funcall ipfn d2))))
                          (,player 20)
                          ,(with-exp-midi-fn (5 250)
                             (setf *length* (round (funcall ipfn d2))))
                          (,player 6)
                          ,(with-lin-midi-fn (0 50)
                             (setf *clockinterv* (round (funcall ipfn d2)))))))
          (:nk2-std2-noreset ,(lambda (player)
                                `((,player 0)
                                  (list ,(with-exp-midi-fn (0.1 20)
                                             (let ((speedf (float (funcall ipfn d2))))
                                               (set-value :maxspeed (* speedf 1.05))
                                               (set-value :maxforce (* speedf 0.09))))
                                          t)
                                  (,player 1)
                                  (list
                                   ,(with-lin-midi-fn (1 8)
                                      (set-value :sepmult (float (funcall ipfn d2))))
                                   t)
                                  (,player 2)
                                  (list ,(with-lin-midi-fn (1 8)
                                             (set-value :cohmult (float (funcall ipfn d2))))
                                          t)
                                  (,player 3)
                                  (list ,(with-lin-midi-fn (1 8)
                                             (set-value :alignmult (float (funcall ipfn d2))))
                                          t)
                                  (,player 4)
                                  (list ,(with-lin-midi-fn (0 500)
                                             (set-value :lifemult (float (funcall ipfn d2))))
                                          t))))

          (:nk2-mass ,(lambda (player)
                        `((,player 0)
                          ,(with-exp-midi-fn (0.1 20)
                             (let ((speedf (float (funcall ipfn d2))))
                               (set-value :maxspeed (* speedf 1.05))
                               (set-value :maxforce (* speedf 0.09))))
                          (,player 1)
                          ,(with-lin-midi-fn (1 8)
                             (set-value :sepmult (float (funcall ipfn d2))))
                          (,player 2)
                          ,(with-lin-midi-fn (1 8)
                             (set-value :cohmult (float (funcall ipfn d2))))
                          (,player 3)
                          ,(with-lin-midi-fn (1 8)
                             (set-value :alignmult (float (funcall ipfn d2))))
                          (,player 4)
                          ,(with-lin-midi-fn (0 100)
                             (set-value :lifemult (float (funcall ipfn d2)))))))
          (:nk2-mass-noreset ,(lambda (player)
                                `((,player 0)
                                  (list ,(with-exp-midi-fn (0.1 20)
                                             (let ((speedf (float (funcall ipfn d2))))
                                               (set-value :maxspeed (* speedf 1.05))
                                               (set-value :maxforce (* speedf 0.09))))
                                          t)
                                  (,player 1)
                                  (list
                                   ,(with-lin-midi-fn (1 8)
                                      (set-value :sepmult (float (funcall ipfn d2))))
                                   t)
                                  (,player 2)
                                  (list ,(with-lin-midi-fn (1 8)
                                             (set-value :cohmult (float (funcall ipfn d2))))
                                          t)
                                  (,player 3)
                                  (list ,(with-lin-midi-fn (1 8)
                                             (set-value :alignmult (float (funcall ipfn d2))))
                                          t)
                                  (,player 4)
                                  (list ,(with-lin-midi-fn (0 100)
                                             (set-value :lifemult (float (funcall ipfn d2))))
                                          t))))
          (:obst-ctl1 ,(lambda (player)
                         `((,player 7)
                           ,(lambda (d2)
                              (if (numberp d2)
                                  (let ((obstacle (aref *obstacles* player)))
                                    (with-slots (brightness radius)
                                        obstacle
                                      (let ((ipfn (ip-exp 2.5 10.0 128)))
                                        (set-lookahead player (float (funcall ipfn d2))))
                                      (let ((ipfn (ip-exp 1 1.0 128)))
                                        (set-multiplier player (float (funcall ipfn d2))))
                                      (let ((ipfn (ip-lin 0.2 1.0 128)))
                                        (setf brightness (funcall ipfn d2)))))))
                           (,player 40)
                           ,(make-retrig-move-fn player :dir :right :max 400 :ref 7 :clip nil)
                           (,player 50)
                           ,(make-retrig-move-fn player :dir :left :max 400 :ref 7 :clip nil)
                           (,player 70)
                           ,(make-retrig-move-fn player :dir :up :max 400 :ref 7 :clip nil)
                           (,player 60)
                           ,(make-retrig-move-fn player :dir :down :max 400 :ref 7 :clip nil)
                           (,player 99)
                           ,(lambda (d2)
                              (if (and (numberp d2) (= d2 127))
                                  (toggle-obstacle player)))
                           )))
          (:obst-ctl2 ,(lambda (player)
                         `((,player 7)
                           ,(lambda (d2)
                              (if (numberp d2)
                                  (let ((obstacle (aref *obstacles* player)))
                                    (with-slots (brightness radius)
                                        obstacle
                                      (let ((ipfn (ip-exp 2.5 2.5 128)))
                                        (set-lookahead player (float (funcall ipfn d2))))
                                      (let ((ipfn (ip-exp 1 100.0 128)))
                                        (set-multiplier player (float (funcall ipfn d2))))
                                      (let ((ipfn (ip-lin 0.2 1.0 128)))
                                        (setf brightness (funcall ipfn d2)))))))
                           (,player 40)
                           ,(make-retrig-move-fn player :dir :right :max 400 :ref 7 :clip nil)
                           (,player 50)
                           ,(make-retrig-move-fn player :dir :left :max 400 :ref 7 :clip nil)
                           (,player 60)
                           ,(make-retrig-move-fn player :dir :up :max 400 :ref 7 :clip nil)
                           (,player 70)
                           ,(make-retrig-move-fn player :dir :down :max 400 :ref 7 :clip nil)
                           (,player 99)
                           ,(lambda (d2)
                              (if (and (numberp d2) (= d2 127))
                                  (toggle-obstacle player)))
                           )))
          (:boid-ctl1-noreset ,(lambda (player)
                                 `((,player 100)
                                   (list
                                    ,(with-exp-midi-fn (0.1 20)
                                       (unless (= (aref *cc-state* player 40) 127)
                                         (let ((speedf (float (funcall ipfn d2))))
                                           (set-value :maxspeed (* speedf 1.05))
                                           (set-value :maxforce (* speedf 0.09)))))
                                    t)
                                   (,player 70)
                                   (list ,(with-lin-midi-fn (1 8)
                                              (unless (= (aref *cc-state* player 40) 127)
                                                (set-value :sepmult (float (funcall ipfn d2)))))
                                           t)
                                   (,player 65)
                                   (list ,(with-lin-midi-fn (1 8)
                                              (unless (= (aref *cc-state* player 40) 127)
                                                (set-value :cohmult (float (funcall ipfn d2)))))
                                           t)
                                   (,player 7)
                                   (list ,(with-lin-midi-fn (1 8)
                                              (unless (= (aref *cc-state* player 40) 127)
                                                (set-value :alignmult (float (funcall ipfn d2)))))
                                           t)
                                   (,player 40)
                                   ,(lambda (d2)
                                      (if (and (numberp d2) (> d2 0))
                                          (cl-boids-gpu::timer-remove-boids *boids-per-click* 50)))
                                   (,player 50)
                                   ,(lambda (d2)
                                      (if (and (numberp d2) (> d2 0))
                                          (cl-boids-gpu::timer-add-boids *boids-per-click* 50))))))
          (:boid-ctl1 ,(lambda (player)
                         `((,player 100)
                           ,(with-exp-midi-fn (0.1 20)
                              (unless (= (aref *cc-state* player 40) 127)
                                (let ((speedf (float (funcall ipfn d2))))
                                  (set-value :maxspeed (* speedf 1.05))
                                  (set-value :maxforce (* speedf 0.09)))))
                           (,player 70)
                           ,(with-lin-midi-fn (1 8)
                              (unless (= (aref *cc-state* player 40) 127)
                                (set-value :sepmult (float (funcall ipfn d2)))))
                           (,player 65)
                            ,(with-lin-midi-fn (1 8)
                              (unless (= (aref *cc-state* player 40) 127)
                                (set-value :cohmult (float (funcall ipfn d2)))))
                           (,player 7)
                           ,(with-lin-midi-fn (1 8)
                              (unless (= (aref *cc-state* player 40) 127)
                                (set-value :alignmult (float (funcall ipfn d2)))))
                           (,player 40)
                           ,(lambda (d2)
                              (if (and (numberp d2) (> d2 0))
                                  (cl-boids-gpu::timer-remove-boids *boids-per-click* 50)))
                           (,player 50)
                           ,(lambda (d2)
                              (if (and (numberp d2) (> d2 0))
                                  (cl-boids-gpu::timer-add-boids *boids-per-click* 50))))))
          (:boid-ctl2 ,(lambda (player)
                         `((,player 7)
                           ,(with-exp-midi-fn (0.1 20)
                              (unless (= (aref *cc-state* player 40) 127)
                                (let ((speedf (float (funcall ipfn d2))))
                                  (set-value :maxspeed (* speedf 1.05))
                                  (set-value :maxforce (* speedf 0.09)))))
                           (,player 70)
                           ,(with-lin-midi-fn (1 8)
                              (unless (= (aref *cc-state* player 40) 127)
                                (set-value :sepmult (float (funcall ipfn d2)))))
                           (,player 65)
                           ,(with-lin-midi-fn (1 8)
                              (unless (= (aref *cc-state* player 40) 127)
                                (set-value :cohmult (float (funcall ipfn d2)))))
                           (,player 100)
                           ,(with-lin-midi-fn (1 8)
                              (unless (= (aref *cc-state* player 40) 127)
                                (set-value :alignmult (float (funcall ipfn d2)))))
                           (,player 40)
                           ,(lambda (d2)
                              (if (and (numberp d2) (> d2 0))
                                  (cl-boids-gpu::timer-remove-boids *boids-per-click* 50)))
                           (,player 50)
                           ,(lambda (d2)
                              (if (and (numberp d2) (> d2 0))
                                  (cl-boids-gpu::timer-add-boids *boids-per-click* 50
                                                                 :origin (list
                                                                          (list (obstacle-x (aref *obstacles* player))
                                                                                (obstacle-y (aref *obstacles* player))))))))))
          (:life-ctl1 ,(lambda (player)
                         `((,player 7)
                           ,(with-lin-midi-fn (0 100)
                              (set-value :lifemult (float (funcall ipfn d2))))
                           (,player 40)
                           ,(lambda (d2)
                              (if (and (numberp d2) (> d2 0))
                                  (cl-boids-gpu::timer-remove-boids *boids-per-click* 50)))
                           (,player 50)
                           ,(lambda (d2)
                              (if (and (numberp d2) (> d2 0))
                                  (cl-boids-gpu::timer-add-boids *boids-per-click* 50))))))
          (:life-ctl3 ,(lambda (player)
                         `((,player 7)
                           ,(with-lin-midi-fn (0 600)
                              (set-value :lifemult (float (funcall ipfn d2))))
                           (,player 40)
                           ,(lambda (d2)
                              (if (and (numberp d2) (> d2 0))
                                  (cl-boids-gpu::timer-remove-boids *boids-per-click* 50)))
                           (,player 50)
                           ,(lambda (d2)
                              (if (and (numberp d2) (> d2 0))
                                  (cl-boids-gpu::timer-add-boids *boids-per-click* 50)))
                           )))
          (:life-ctl2 ,(lambda (player)
                         `((,player 100)
                           ,(lambda (d2)
                              (if (numberp d2)
                                  (let ((obstacle (aref *obstacles* player)))
                                    (with-slots (brightness) obstacle
                                      (let ((ipfn (ip-lin 0.2 1.0 128)))
                                        (setf brightness (funcall ipfn d2)))))))
                           (,player 70)
                           ,(with-lin-midi-fn (0 100)
                              (set-value :lifemult (float (funcall ipfn d2))))
                           (,player 40)
                           ,(lambda (d2)
                              (if (and (numberp d2) (> d2 0))
                                  (cl-boids-gpu::timer-remove-boids *boids-per-click* 50)))
                           (,player 50)
                           ,(lambda (d2)
                              (if (and (numberp d2) (> d2 0))
                                  (cl-boids-gpu::timer-add-boids
                                   *boids-per-click* 50
                                   :origin (list
                                            (list (obstacle-x (aref *obstacles* player))
                                                  (obstacle-y (aref *obstacles* player)))))))
                           (,player 99)
                           ,(lambda (d2)
                              (if (and (numberp d2) (= d2 127))
                                  (toggle-obstacle player)))))))
        do (setf (gethash key *cc-presets*) val))
  *cc-presets*)

(init-cc-presets)

(defun nk2-std (player)
  "array-idx from 0!"
  `((,player 8)
    ,(with-exp-midi-fn (0.1 20)
       (let ((speedf (float (funcall ipfn d2))))
         (set-value :maxspeed (* speedf 1.05))
         (set-value :maxforce (* speedf 0.09))))
    (,player 9)
    ,(with-lin-midi-fn (1 8)
       (set-value :sepmult (float (funcall ipfn d2))))
    (,player 10)
    ,(with-lin-midi-fn (1 8)
       (set-value :cohmult (float (funcall ipfn d2))))
    (,player 11)
    ,(with-lin-midi-fn (1 8)
       (set-value :alignmult (float (funcall ipfn d2))))
    (,player 12)
    ,(with-exp-midi-fn (1 500)
       (set-value :boids-per-click(round (funcall ipfn d2))))
    (,player 13)
    ,(with-lin-midi-fn (0 500)
       (set-value :lifemult (float (funcall ipfn d2))))
    (,player 14)
    ,(with-lin-midi-fn (0 50)
       (setf *clockinterv* (round (funcall ipfn d2))))
    (,player 4)
    ,(with-exp-midi-fn (5 250)
       (setf *length* (round (funcall ipfn d2))))))

(defun nk2-std-noreset (player)
  `((,player 8)
    ,(list
      (with-exp-midi-fn (0.1 20)
        (let ((speedf (float (funcall ipfn d2))))
          (set-value :maxspeed (* speedf 1.05))
          (set-value :maxforce (* speedf 0.09))))
      nil)
    (,player 9)
    ,(list
      (with-lin-midi-fn (1 8)
        (set-value :sepmult (float (funcall ipfn d2))))
      nil)
    (,player 10)
    ,(list
      (with-lin-midi-fn (1 8)
        (set-value :cohmult (float (funcall ipfn d2))))
      nil)
    (,player 11)
    ,(list
      (with-lin-midi-fn (1 8)
        (set-value :alignmult (float (funcall ipfn d2))))
      nil)
    (,player 12)
    ,(list
      (with-exp-midi-fn (1 500)
        (set-value :boids-per-click(round (funcall ipfn d2))))
      nil)
    (,player 13)
    ,(list
      (with-lin-midi-fn (0 500)
        (set-value :lifemult (float (funcall ipfn d2))))
      nil)
    (,player 14)
    ,(list
      (with-lin-midi-fn (0 50)
        (setf *clockinterv* (round (funcall ipfn d2))))
      nil)
    (,player 4)
    ,(list
      (with-exp-midi-fn (5 250)
        (setf *length* (round (funcall ipfn d2))))
      nil)))

(defun nk2-std-noreset-nolength (player)
  `((,player 0)
    ,(list
      (with-exp-midi-fn (0.1 20)
             (let ((speedf (float (funcall ipfn d2))))
               (set-value :maxspeed (* speedf 1.05))
               (set-value :maxforce (* speedf 0.09))))
      t)
    (,player 1)
    ,(list
      (with-lin-midi-fn (1 8)
        (set-value :sepmult (float (funcall ipfn d2))))
      t)
    (,player 2)
    ,(list
      (with-lin-midi-fn (1 8)
        (set-value :cohmult (float (funcall ipfn d2))))
      t)
    (,player 3)
    ,(list
      (with-lin-midi-fn (1 8)
        (set-value :alignmult (float (funcall ipfn d2))))
      t)
    (,player 4)
    ,(list
      (with-exp-midi-fn (1 500)
        (set-value :boids-per-click (round (funcall ipfn d2))))
      t)
    (,player 5)
    ,(list
      (with-lin-midi-fn (0 500)
        (set-value :lifemult (float (funcall ipfn d2))))
      t)
    (,player 6)
    ,(list
      (with-lin-midi-fn (0 50)
        (setf *clockinterv* (round (funcall ipfn d2))))
      t)))



(defun nk2-std2 (player)
  `((,player 0)
    ,(with-exp-midi-fn (0.1 20)
       (let ((speedf (float (funcall ipfn d2))))
         (set-value :maxspeed (* speedf 1.05))
         (set-value :maxforce (* speedf 0.09))))
    (,player 1)
    ,(with-lin-midi-fn (1 8)
       (set-value :sepmult (float (funcall ipfn d2))))
    (,player 2)
    ,(with-lin-midi-fn (1 8)
       (set-value :cohmult (float (funcall ipfn d2))))
    (,player 3)
    ,(with-lin-midi-fn (1 8)
       (set-value :alignmult (float (funcall ipfn d2))))
    (,player 4)
    ,(with-lin-midi-fn (0 500)
       (set-value :lifemult (float (funcall ipfn d2))))))

(defun nk2-std2-noreset (player)
  `((,player 0)
    ,(list (with-exp-midi-fn (0.1 20)
               (let ((speedf (float (funcall ipfn d2))))
                 (set-value :maxspeed (* speedf 1.05))
                 (set-value :maxforce (* speedf 0.09))))
            nil)
    (,player 1)
    ,(list
     (with-lin-midi-fn (1 8)
        (set-value :sepmult (float (funcall ipfn d2))))
     nil)
    (,player 2)
    ,(list (with-lin-midi-fn (1 8)
               (set-value :cohmult (float (funcall ipfn d2))))
            nil)
    (,player 3)
    ,(list (with-lin-midi-fn (1 8)
               (set-value :alignmult (float (funcall ipfn d2))))
           nil)
    (,player 4)
    ,(list (with-lin-midi-fn (0 500)
               (set-value :lifemult (float (funcall ipfn d2))))
            nil)))

(defun nk2-mass  (player)
  `((,player 0)
    ,(with-exp-midi-fn (0.1 20)
       (let ((speedf (float (funcall ipfn d2))))
         (set-value :maxspeed (* speedf 1.05))
         (set-value :maxforce (* speedf 0.09))))
    (,player 1)
    ,(with-lin-midi-fn (1 8)
       (set-value :sepmult (float (funcall ipfn d2))))
    (,player 2)
    ,(with-lin-midi-fn (1 8)
       (set-value :cohmult (float (funcall ipfn d2))))
    (,player 3)
    ,(with-lin-midi-fn (1 8)
       (set-value :alignmult (float (funcall ipfn d2))))
    (,player 4)
    ,(with-lin-midi-fn (0 100)
       (set-value :lifemult (float (funcall ipfn d2))))))

(defun nk2-mass-noreset (player)
  `((,player 0)
    ,(list (with-exp-midi-fn (0.1 20)
               (let ((speedf (float (funcall ipfn d2))))
                 (set-value :maxspeed (* speedf 1.05))
                 (set-value :maxforce (* speedf 0.09))))
            nil)
    (,player 1)
    ,(list
     (with-lin-midi-fn (1 8)
        (set-value :sepmult (float (funcall ipfn d2))))
     nil)
    (,player 2)
    ,(list (with-lin-midi-fn (1 8)
               (set-value :cohmult (float (funcall ipfn d2))))
            nil)
    (,player 3)
    ,(list (with-lin-midi-fn (1 8)
               (set-value :alignmult (float (funcall ipfn d2))))
            nil)
    (,player 4)
    ,(list (with-lin-midi-fn (0 100)
               (set-value :lifemult (float (funcall ipfn d2))))
            nil)))

(defun obst-ctl1 (player)
  `((,player 7)
    ,(lambda (d2)
       (if (numberp d2)
           (let ((obstacle (aref *obstacles* player)))
             (with-slots (brightness radius)
                 obstacle
               (let ((ipfn (ip-exp 2.5 10.0 128)))
                 (set-lookahead player (float (funcall ipfn d2))))
               (let ((ipfn (ip-exp 1 1.0 128)))
                 (set-multiplier player (float (funcall ipfn d2))))
               (let ((ipfn (ip-lin 0.2 1.0 128)))
                 (setf brightness (funcall ipfn d2)))))))
    (,player 40)
    ,(make-retrig-move-fn player :dir :right :max 400 :ref 7 :clip nil)
    (,player 50)
    ,(make-retrig-move-fn player :dir :left :max 400 :ref 7 :clip nil)
    (,player 60)
    ,(make-retrig-move-fn player :dir :up :max 400 :ref 7 :clip nil)
    (,player 70)
    ,(make-retrig-move-fn player :dir :down :max 400 :ref 7 :clip nil)
    (,player 99)
    ,(lambda (d2)
       (if (and (numberp d2) (= d2 127))
           (toggle-obstacle player)))
    ))

(defun obst-ctl2 (player)
  `((,player 7)
    ,(lambda (d2)
       (if (numberp d2)
           (let ((obstacle (aref *obstacles* player)))
             (with-slots (brightness radius)
                 obstacle
               (let ((ipfn (ip-exp 2.5 2.5 128)))
                 (set-lookahead player (float (funcall ipfn d2))))
               (let ((ipfn (ip-exp 1 100.0 128)))
                 (set-multiplier player (float (funcall ipfn d2))))
               (let ((ipfn (ip-lin 0.2 1.0 128)))
                 (setf brightness (funcall ipfn d2)))))))
    (,player 40)
    ,(make-retrig-move-fn player :dir :right :max 400 :ref 7 :clip nil)
    (,player 50)
    ,(make-retrig-move-fn player :dir :left :max 400 :ref 7 :clip nil)
    (,player 60)
    ,(make-retrig-move-fn player :dir :up :max 400 :ref 7 :clip nil)
    (,player 70)
    ,(make-retrig-move-fn player :dir :down :max 400 :ref 7 :clip nil)
    (,player 99)
    ,(lambda (d2)
       (if (and (numberp d2) (= d2 127))
           (toggle-obstacle player)))
    ))

(defun boid-ctl1-noreset (player)
  `((,player 100)
    (list
     ,(with-exp-midi-fn (0.1 20)
        (unless (= (aref *cc-state* player 40) 127)
          (let ((speedf (float (funcall ipfn d2))))
            (set-value :maxspeed (* speedf 1.05))
            (set-value :maxforce (* speedf 0.09)))))
     t)
    (,player 70)
    ,(list (with-lin-midi-fn (1 8)
               (unless (= (aref *cc-state* player 40) 127)
                 (set-value :sepmult (float (funcall ipfn d2)))))
            t)
    (,player 65)
    (list ,(with-lin-midi-fn (1 8)
               (unless (= (aref *cc-state* player 40) 127)
                 (set-value :cohmult (float (funcall ipfn d2)))))
            t)
    (,player 7)
    (list ,(with-lin-midi-fn (1 8)
               (unless (= (aref *cc-state* player 40) 127)
                 (set-value :alignmult (float (funcall ipfn d2)))))
            t)
    (,player 40)
    ,(lambda (d2)
       (if (and (numberp d2) (> d2 0))
           (cl-boids-gpu::timer-remove-boids *boids-per-click* 50)))
    (,player 50)
    ,(lambda (d2)
       (if (and (numberp d2) (> d2 0))
           (cl-boids-gpu::timer-add-boids *boids-per-click* 50)))))

(defun boid-ctl1 (player)
  `((,player 100)
    ,(with-exp-midi-fn (0.1 20)
       (unless (= (aref *cc-state* player 40) 127)
         (let ((speedf (float (funcall ipfn d2))))
           (set-value :maxspeed (* speedf 1.05))
           (set-value :maxforce (* speedf 0.09)))))
    (,player 70)
    ,(with-lin-midi-fn (1 8)
       (unless (= (aref *cc-state* player 40) 127)
         (set-value :sepmult (float (funcall ipfn d2)))))
    (,player 65)
    ,(with-lin-midi-fn (1 8)
       (unless (= (aref *cc-state* player 40) 127)
         (set-value :cohmult (float (funcall ipfn d2)))))
    (,player 7)
    ,(with-lin-midi-fn (1 8)
       (unless (= (aref *cc-state* player 40) 127)
         (set-value :alignmult (float (funcall ipfn d2)))))
    (,player 40)
    ,(lambda (d2)
       (if (and (numberp d2) (> d2 0))
           (cl-boids-gpu::timer-remove-boids *boids-per-click* 50)))
    (,player 50)
    ,(lambda (d2)
       (if (and (numberp d2) (> d2 0))
           (cl-boids-gpu::timer-add-boids *boids-per-click* 50)))))

(defun boid-ctl2 (player)
  `((,player 7)
    ,(with-exp-midi-fn (0.1 20)
       (unless (= (aref *cc-state* player 40) 127)
         (let ((speedf (float (funcall ipfn d2))))
           (set-value :maxspeed (* speedf 1.05))
           (set-value :maxforce (* speedf 0.09)))))
    (,player 70)
    ,(with-lin-midi-fn (1 8)
       (unless (= (aref *cc-state* player 40) 127)
         (set-value :sepmult (float (funcall ipfn d2)))))
    (,player 65)
    ,(with-lin-midi-fn (1 8)
       (unless (= (aref *cc-state* player 40) 127)
         (set-value :cohmult (float (funcall ipfn d2)))))
    (,player 100)
    ,(with-lin-midi-fn (1 8)
       (unless (= (aref *cc-state* player 40) 127)
         (set-value :alignmult (float (funcall ipfn d2)))))
    (,player 40)
    ,(lambda (d2)
       (if (and (numberp d2) (> d2 0))
           (cl-boids-gpu::timer-remove-boids *boids-per-click* 50)))
    (,player 50)
    ,(lambda (d2)
       (if (and (numberp d2) (> d2 0))
           (cl-boids-gpu::timer-add-boids *boids-per-click* 50
                                          :origin (list
                                                   (list (obstacle-x (aref *obstacles* player))
                                                         (obstacle-y (aref *obstacles* player)))))))))

(defun life-ctl1 (player)
  `((,player 7)
    ,(with-lin-midi-fn (0 100)
       (set-value :lifemult (float (funcall ipfn d2))))
    (,player 40)
    ,(lambda (d2)
       (if (and (numberp d2) (> d2 0))
           (cl-boids-gpu::timer-remove-boids *boids-per-click* 50)))
    (,player 50)
    ,(lambda (d2)
       (if (and (numberp d2) (> d2 0))
           (cl-boids-gpu::timer-add-boids *boids-per-click* 50)))))

(defun life-ctl3 (player)
  `((,player 7)
    ,(with-lin-midi-fn (0 600)
       (set-value :lifemult (float (funcall ipfn d2))))
    (,player 40)
    ,(lambda (d2)
       (if (and (numberp d2) (> d2 0))
           (cl-boids-gpu::timer-remove-boids *boids-per-click* 50)))
    (,player 50)
    ,(lambda (d2)
       (if (and (numberp d2) (> d2 0))
           (cl-boids-gpu::timer-add-boids *boids-per-click* 50)))
    ))

(defun life-ctl2 (player)
  `((,player 100)
    ,(lambda (d2)
       (if (numberp d2)
           (let ((obstacle (aref *obstacles* player)))
             (with-slots (brightness) obstacle
               (let ((ipfn (ip-lin 0.2 1.0 128)))
                 (setf brightness (funcall ipfn d2)))))))
    (,player 70)
    ,(with-lin-midi-fn (0 100)
       (set-value :lifemult (float (funcall ipfn d2))))
    (,player 40)
    ,(lambda (d2)
       (if (and (numberp d2) (> d2 0))
           (cl-boids-gpu::timer-remove-boids *boids-per-click* 50)))
    (,player 50)
    ,(lambda (d2)
       (if (and (numberp d2) (> d2 0))
           (cl-boids-gpu::timer-add-boids
            *boids-per-click* 50
            :origin (list
                     (list (obstacle-x (aref *obstacles* player))
                           (obstacle-y (aref *obstacles* player)))))))
    (,player 99)
    ,(lambda (d2)
       (if (and (numberp d2) (= d2 127))
           (toggle-obstacle player)))))

;;; midi-note-fns:

(defun boid-state-save (player)
  (setf (aref *note-fns* (player-aref player))
        (lambda (keynum velo)
          (declare (ignore velo))
          (cond
            ((<= 44 keynum 51) (bs-state-recall (- keynum 44)))
            ((<= 36 keynum 43) (bs-state-save (- keynum 36)))
            (:else (warn "~&pad num ~a not assigned!" keynum))))))

(defun boid-num-ctl (player)
  (setf (aref *note-fns* (player-aref player))
        (lambda (keynum velo)
          (cond
            ((<= 51 keynum 51)
             (cl-boids-gpu::timer-remove-boids *boids-per-click* *boids-per-click* :fadetime 0))
            ((<= 36 keynum 50)
             (let* ((ip (interp keynum 36 0 51 1.0))
                    (x (interp (/ (mod ip 0.25) 0.25) 0 0.2 1 1.0))
                    (y (interp (* 0.25 (floor ip 0.25)) 0 0.1 1 1.1)))
               (cl-boids-gpu::timer-add-boids *boids-per-click* 10 :origin `(,x ,y))))
            (:else (warn "~&pad num ~a not assigned!" keynum))))))

(defun no-fun (player)
    (setf (aref *note-fns* (player-aref player))
        (lambda (keynum velo)
          (declare (ignore keynum velo)))))


;;; (no-fun :arturia)
